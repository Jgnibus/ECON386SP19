filepath<-C:\Users/Steve L\Desktop\ECON386REPO\NHIS_2007_Cleaned.csv"
DATA<-read.csv("C:/Users/Steve L/Desktop/ECON386REPO/NHIS_2007_Cleaned.csv")
View(DATA)
data mtcars
filepath<-C:\Users/Steve L\Desktop\ECON386REPO\NHIS_2007_Cleaned.csv"
DATA<-read.csv("C:/Users/Steve L/Desktop/ECON386REPO/NHIS_2007_Cleaned.csv")
View(DATA)
library(datasets)
library(datasets)
mtcars
##MOBLAB #8 SOLUTIONS##
#1)
mean(mtcars$mpg[mtcars$am==1])-mean(mtcars$mpg[mtcars$am==0])
#2) mpg=beta*am
Model1<-ln(mpg~0+am,mtcars)
#2) mpg=beta*am
Model1<-lm(mpg~0+am,mtcars)
summary(Model1)
#3) mpg=beta_0+beta_1*am
MOdel2<-lm(mpg~am,mtcars)
#3) mpg=beta_0+beta_1*am
Model2<-lm(mpg~am,mtcars)
summary(Model2)
#4) mpg=beta_0+beta_2*am+beta_3*wt
Model3<-lm(mpg~am+wt,mtcars)
summary(Model3)
?rnorm
##to simulate 100 draws from the standard normal distribution:
sample1<-rnorm(n=100, mean=0, sd=1)
##plot histogram
hist(sample1, breaks = 30, prob = TRUE, xlim=c(-4,4), ylim=c(0,.7))
##add density curve to diagram
curve(dnorm(x, mean = 0, sd = 1), col = "darkblue", lwd = 2, add = TRUE)
##resampling with a much larger sample and plotting
sample2<-rnorm(n=100000, mean=0, sd=1)
hist(sample2, breaks = 30, prob = TRUE, xlim=c(-4,4), ylim=c(0,.7))
curve(dnorm(x, mean = 0, sd = 1), col = "darkblue", lwd = 2, add = TRUE)
##pnorm() is the cumulative distribution function, F(x), for the normal distribution
##use this instead of using Z-score table from your stats book!
pnorm(0,mean=0, sd=1)  ## P(X<0)
pnorm(2,0,1)  ##P(X<2)
pnorm(1,0,1)-pnorm(-1,0,1)  ## P(X is within 1 sd of the mean)
pnorm(2,0,1)-pnorm(-2,0,1)  ## P(X is within 2 sd of the mean)
pnorm(3,0,1)-pnorm(-3,0,1)  ## P(X is within 2 sd of the mean)
##sample the error term
n=100 ##sample size
sigma=1  ##error standard deviation
e<-rnorm(n,0,sigma)  ##draws normally distributed error
View(e)
x_data<-runif(n,-1,1)
B_0=3  ##population intercept term
B_1=1/2  ##population slope term
y_data<-B_0+B_1*x_data+e  ##generates simulated y values from the DGP
##sample the error term
n=5 ##sample size
sigma=1  ##error standard deviation
e<-rnorm(n,0,sigma)  ##draws normally distributed error
x_data<-runif(n,-1,1)  ##generates synthetic x (input) data
B_0=3  ##population intercept term
B_1=1/2  ##population slope term
y_data<-B_0+B_1*x_data+e  ##generates simulated y values from the DGP
plot(x_data, y_data)  ##plot the data
abline(B_0,B_1, col='red')  ##add the population regression line
##sample the error term
n=5 ##sample size
sigma=1  ##error standard deviation
e<-rnorm(n,0,0)  ##draws normally distributed error
x_data<-runif(n,-1,1)  ##generates synthetic x (input) data
B_0=3  ##population intercept term
B_1=1/2  ##population slope term
y_data<-B_0+B_1*x_data+e  ##generates simulated y values from the DGP
plot(x_data, y_data)  ##plot the data
abline(B_0,B_1, col='red')  ##add the population regression line
e<-rnorm(n,0,sigma)  ##draws normally distributed error
x_data<-runif(n,-1,1)  ##generates synthetic x (input) data
B_0=3  ##population intercept term
B_1=1/2  ##population slope term
y_data<-B_0+B_1*x_data+e  ##generates simulated y values from the DGP
plot(x_data, y_data)  ##plot the data
abline(B_0,B_1, col='red')  ##add the population regression line
##sample the error term
set.seed(1234)
n=5 ##sample size
sigma=1  ##error standard deviation
e<-rnorm(n,0,sigma)  ##draws normally distributed error
x_data<-runif(n,-1,1)  ##generates synthetic x (input) data
B_0=3  ##population intercept term
B_1=1/2  ##population slope term
y_data<-B_0+B_1*x_data+e  ##generates simulated y values from the DGP
plot(x_data, y_data)  ##plot the data
abline(B_0,B_1, col='red')  ##add the population regression line
data<-cbind(y_data, x_data)  ##bind the columns of the y and x data together
df1<-as.data.frame(data)  ##convert to dataframe object
View(df1)  ##view newly created dataframe
M1<-lm(y_data~x_data, df1)  ##estimate linear model
summary(M1)
summary(M1)
abline(M1$coefficients[1],M1$coefficients[2], col='blue')
n=100 ##sample size
sigma=1  ##error standard deviation
e<-rnorm(n,0,sigma)  ##draws normally distributed error
x_data<-runif(n,-1,1)  ##generates synthetic x (input) data
B_0=3  ##population intercept term
B_1=1/2  ##population slope term
y_data<-B_0+B_1*x_data+e  ##generates simulated y values from the DGP
plot(x_data, y_data)  ##plot the data
abline(B_0,B_1, col='red')  ##add the population regression line
data<-cbind(y_data, x_data)  ##bind the columns of the y and x data together
df1<-as.data.frame(data)  ##convert to dataframe object
M1<-lm(y_data~x_data, df1)  ##estimate linear model
summary(M1)
abline(M1$coefficients[1],M1$coefficients[2], col='blue')
